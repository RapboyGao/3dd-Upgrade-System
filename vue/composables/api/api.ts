/* tslint:disable */
/* eslint-disable */
/**
 * Nuxt Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AircraftExperiencesOverrideRow
 */
export interface AircraftExperiencesOverrideRow {
    /**
     * 员工号
     * @type {string}
     * @memberof AircraftExperiencesOverrideRow
     */
    'staffID'?: string;
    /**
     * 员工姓名
     * @type {string}
     * @memberof AircraftExperiencesOverrideRow
     */
    'name'?: string;
    /**
     * 员工姓名简拼
     * @type {string}
     * @memberof AircraftExperiencesOverrideRow
     */
    'nameShortcut'?: string;
    /**
     * 员工姓名拼音
     * @type {string}
     * @memberof AircraftExperiencesOverrideRow
     */
    'namePinYin'?: string;
    /**
     * 当前行政部门
     * @type {string}
     * @memberof AircraftExperiencesOverrideRow
     */
    'currentDepartment'?: string;
    /**
     * 在三大队时的最后一个行政部门
     * @type {string}
     * @memberof AircraftExperiencesOverrideRow
     */
    'lastDepartment3dd'?: string;
    /**
     * 
     * @type {Array<DepartmentHistoryRow>}
     * @memberof AircraftExperiencesOverrideRow
     */
    'departmentHistory'?: Array<DepartmentHistoryRow>;
    /**
     * 
     * @type {Array<AircraftType>}
     * @memberof AircraftExperiencesOverrideRow
     */
    'AircraftExperiences'?: Array<AircraftType>;
}
/**
 * 
 * @export
 * @interface AircraftExperiencesOverrideRowUpsert
 */
export interface AircraftExperiencesOverrideRowUpsert {
    /**
     * 员工号
     * @type {string}
     * @memberof AircraftExperiencesOverrideRowUpsert
     */
    'staffID'?: string;
    /**
     * 
     * @type {Array<AircraftType>}
     * @memberof AircraftExperiencesOverrideRowUpsert
     */
    'AircraftExperiences'?: Array<AircraftType>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const AircraftType = {
    B737: 'B737',
    B777: 'B777',
    B787: 'B787',
    B747: 'B747',
    _728: '728',
    _772: '772',
    _77L: '77L',
    _77S: '77S',
    _73Q: '73Q',
    _747: '747',
    _777: '777',
    _744: '744'
} as const;

export type AircraftType = typeof AircraftType[keyof typeof AircraftType];


/**
 * 
 * @export
 * @interface CheckRideDetailRow
 */
export interface CheckRideDetailRow {
    /**
     * 员工号
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'staffID'?: string;
    /**
     * 员工姓名
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'name'?: string;
    /**
     * 员工姓名简拼
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'nameShortcut'?: string;
    /**
     * 员工姓名拼音
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'namePinYin'?: string;
    /**
     * 当前行政部门
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'currentDepartment'?: string;
    /**
     * 在三大队时的最后一个行政部门
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'lastDepartment3dd'?: string;
    /**
     * 
     * @type {Array<DepartmentHistoryRow>}
     * @memberof CheckRideDetailRow
     */
    'departmentHistory'?: Array<DepartmentHistoryRow>;
    /**
     * 
     * @type {CheckRideType}
     * @memberof CheckRideDetailRow
     */
    'checkRide'?: CheckRideType;
    /**
     * 检查日期时间戳
     * @type {number}
     * @memberof CheckRideDetailRow
     */
    'checkRideDate'?: number;
    /**
     * 
     * @type {CheckRideResult}
     * @memberof CheckRideDetailRow
     */
    'checkRideResult'?: CheckRideResult;
    /**
     * 检查备注
     * @type {string}
     * @memberof CheckRideDetailRow
     */
    'note'?: string;
}


/**
 * 
 * @export
 * @interface CheckRideDetailRowUpsert
 */
export interface CheckRideDetailRowUpsert {
    /**
     * 员工号
     * @type {string}
     * @memberof CheckRideDetailRowUpsert
     */
    'staffID'?: string;
    /**
     * 
     * @type {CheckRideType}
     * @memberof CheckRideDetailRowUpsert
     */
    'checkRide'?: CheckRideType;
    /**
     * 检查日期时间戳
     * @type {number}
     * @memberof CheckRideDetailRowUpsert
     */
    'checkRideDate'?: number;
    /**
     * 
     * @type {CheckRideResult}
     * @memberof CheckRideDetailRowUpsert
     */
    'checkRideResult'?: CheckRideResult;
    /**
     * 检查备注
     * @type {string}
     * @memberof CheckRideDetailRowUpsert
     */
    'note'?: string;
}


/**
 * 
 * @export
 * @enum {string}
 */

export const CheckRideResult = {
    Satisfactory: 'Satisfactory',
    Unsatisfactory: 'Unsatisfactory',
    Incomplete: 'Incomplete'
} as const;

export type CheckRideResult = typeof CheckRideResult[keyof typeof CheckRideResult];


/**
 * 
 * @export
 * @enum {string}
 */

export const CheckRideType = {
    F1Sim: 'F1_Sim 初始改装/转机型',
    F2Flight: 'F2_Flight 航线检查',
    F2Sim: 'F2_Sim 模拟机检查',
    F2bFlight: 'F2b_Flight 航线检查',
    F3Sim: 'F3_Sim 模拟机检查',
    F3bFlight: 'F3b_Flight 航线检查',
    F3bSim: 'F3b_Sim 模拟机检查',
    F3bFlight2: 'F3b_Flight 航线检查',
    F4Sim: 'F4_Sim 模拟机检查',
    F4Flight: 'F4_Flight 航线检查',
    F5Oral: 'F5_Oral 口试',
    F5SimEval: 'F5_SimEval 模拟机评估',
    F5Flight11: 'F5_Flight1 航线检查1',
    F5Flight22: 'F5_Flight2 航线检查2',
    F5Flight33: 'F5_Flight3 航线检查3',
    F5Flight44: 'F5_Flight4 航线检查4',
    F5Sim: 'F5_Sim 局方检查',
    MTrafficPattern: 'M_TrafficPattern 本场',
    JSim: 'J_Sim 模拟机',
    JFlight: 'J_Flight 航线检查',
    A1Flight: 'A1_Flight 航线检查',
    A2Flight: 'A2_Flight 航线检查',
    A2bFlight: 'A2b_Flight 航线检查',
    TaTrafficPattern: 'Ta_TrafficPattern 本场',
    TaSimEval: 'Ta_SimEval 模拟机评估',
    TaSim: 'Ta_Sim 模拟机检查',
    TbSimEval: 'Tb_SimEval 模拟机评估',
    TbSim: 'Tb_Sim 模拟机检查'
} as const;

export type CheckRideType = typeof CheckRideType[keyof typeof CheckRideType];


/**
 * 
 * @export
 * @interface DeleteWithID
 */
export interface DeleteWithID {
    /**
     * 要删除的行的唯一id
     * @type {string}
     * @memberof DeleteWithID
     */
    'id'?: string;
}
/**
 * 飞行员在不同行政部门的历史记录，不单独使用
 * @export
 * @interface DepartmentHistoryRow
 */
export interface DepartmentHistoryRow {
    /**
     * 行政部门
     * @type {string}
     * @memberof DepartmentHistoryRow
     */
    'department'?: string;
    /**
     * 开始日期时间戳
     * @type {number}
     * @memberof DepartmentHistoryRow
     */
    'startDate'?: number;
}
/**
 * 
 * @export
 * @interface LevelOverrideRow
 */
export interface LevelOverrideRow {
    /**
     * 员工号
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'staffID'?: string;
    /**
     * 员工姓名
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'name'?: string;
    /**
     * 员工姓名简拼
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'nameShortcut'?: string;
    /**
     * 员工姓名拼音
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'namePinYin'?: string;
    /**
     * 当前行政部门
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'currentDepartment'?: string;
    /**
     * 在三大队时的最后一个行政部门
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'lastDepartment3dd'?: string;
    /**
     * 
     * @type {Array<DepartmentHistoryRow>}
     * @memberof LevelOverrideRow
     */
    'departmentHistory'?: Array<DepartmentHistoryRow>;
    /**
     * 员工号-SpecificLevel，作为唯一ID
     * @type {string}
     * @memberof LevelOverrideRow
     */
    'id'?: string;
    /**
     * 
     * @type {SpecificLevel}
     * @memberof LevelOverrideRow
     */
    'level'?: SpecificLevel;
    /**
     * 要覆盖的飞行员升级日期时间戳
     * @type {number}
     * @memberof LevelOverrideRow
     */
    'levelDate'?: number;
}


/**
 * 
 * @export
 * @interface LevelOverrideRowUpsert
 */
export interface LevelOverrideRowUpsert {
    /**
     * 员工号
     * @type {string}
     * @memberof LevelOverrideRowUpsert
     */
    'staffID'?: string;
    /**
     * 
     * @type {SpecificLevel}
     * @memberof LevelOverrideRowUpsert
     */
    'level'?: SpecificLevel;
    /**
     * 要覆盖的飞行员升级日期时间戳
     * @type {number}
     * @memberof LevelOverrideRowUpsert
     */
    'levelDate'?: number;
}


/**
 * 在 MainSheetRow 中代表某个标准是否有Override，不单独使用
 * @export
 * @interface LevelOverrideStatus
 */
export interface LevelOverrideStatus {
    /**
     * 在 MainSheetRow 中代表某个标准是否有Override
     * @type {boolean}
     * @memberof LevelOverrideStatus
     */
    '#/components/schemas/SpecificLevel'?: boolean;
}
/**
 * 总表数据中的行信息，由服务器发送给前端，包含飞行员的基本信息和所有Level获得时间
 * @export
 * @interface MainSheetRow
 */
export interface MainSheetRow {
    /**
     * 员工号
     * @type {string}
     * @memberof MainSheetRow
     */
    'staffID'?: string;
    /**
     * 员工姓名
     * @type {string}
     * @memberof MainSheetRow
     */
    'name'?: string;
    /**
     * 员工姓名简拼
     * @type {string}
     * @memberof MainSheetRow
     */
    'nameShortcut'?: string;
    /**
     * 员工姓名拼音
     * @type {string}
     * @memberof MainSheetRow
     */
    'namePinYin'?: string;
    /**
     * 当前行政部门
     * @type {string}
     * @memberof MainSheetRow
     */
    'currentDepartment'?: string;
    /**
     * 在三大队时的最后一个行政部门
     * @type {string}
     * @memberof MainSheetRow
     */
    'lastDepartment3dd'?: string;
    /**
     * 
     * @type {Array<DepartmentHistoryRow>}
     * @memberof MainSheetRow
     */
    'departmentHistory'?: Array<DepartmentHistoryRow>;
    /**
     * 
     * @type {Array<string>}
     * @memberof MainSheetRow
     */
    'AircraftExperiences'?: Array<string>;
    /**
     * 
     * @type {SpecificLevel}
     * @memberof MainSheetRow
     */
    'highestLevel'?: SpecificLevel;
    /**
     * F1升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F1'?: number;
    /**
     * F2升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F2'?: number;
    /**
     * F2b升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F2b'?: number;
    /**
     * F3升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F3'?: number;
    /**
     * F3b升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F3b'?: number;
    /**
     * F4升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F4'?: number;
    /**
     * F5升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'F5'?: number;
    /**
     * M升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'M'?: number;
    /**
     * J升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'J'?: number;
    /**
     * A1升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'A1'?: number;
    /**
     * A2升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'A2'?: number;
    /**
     * A2b升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'A2b'?: number;
    /**
     * Ta升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'Ta'?: number;
    /**
     * Tb升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'Tb'?: number;
    /**
     * C升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'C'?: number;
    /**
     * Tc升级日期时间戳
     * @type {number}
     * @memberof MainSheetRow
     */
    'Tc'?: number;
    /**
     * 
     * @type {LevelOverrideStatus}
     * @memberof MainSheetRow
     */
    'LevelOverrideStatus'?: LevelOverrideStatus;
}


/**
 * 飞行员的基本信息，包括员工号、姓名、当前行政部门和在三大队时的最后一个行政部门, 不单独使用，作为其他对象的基础
 * @export
 * @interface PilotInfo
 */
export interface PilotInfo {
    /**
     * 员工号
     * @type {string}
     * @memberof PilotInfo
     */
    'staffID'?: string;
    /**
     * 员工姓名
     * @type {string}
     * @memberof PilotInfo
     */
    'name'?: string;
    /**
     * 员工姓名简拼
     * @type {string}
     * @memberof PilotInfo
     */
    'nameShortcut'?: string;
    /**
     * 员工姓名拼音
     * @type {string}
     * @memberof PilotInfo
     */
    'namePinYin'?: string;
    /**
     * 当前行政部门
     * @type {string}
     * @memberof PilotInfo
     */
    'currentDepartment'?: string;
    /**
     * 在三大队时的最后一个行政部门
     * @type {string}
     * @memberof PilotInfo
     */
    'lastDepartment3dd'?: string;
    /**
     * 
     * @type {Array<DepartmentHistoryRow>}
     * @memberof PilotInfo
     */
    'departmentHistory'?: Array<DepartmentHistoryRow>;
}
/**
 * 
 * @export
 * @interface SearchWithDateAndKeyword
 */
export interface SearchWithDateAndKeyword {
    /**
     * 开始日期时间戳
     * @type {number}
     * @memberof SearchWithDateAndKeyword
     */
    'startDate'?: number;
    /**
     * 结束日期时间戳
     * @type {number}
     * @memberof SearchWithDateAndKeyword
     */
    'endDate'?: number;
    /**
     * 关键词
     * @type {string}
     * @memberof SearchWithDateAndKeyword
     */
    'keyword'?: string;
}
/**
 * 
 * @export
 * @interface SearchWithDatePeriod
 */
export interface SearchWithDatePeriod {
    /**
     * 开始日期时间戳
     * @type {number}
     * @memberof SearchWithDatePeriod
     */
    'startDate'?: number;
    /**
     * 结束日期时间戳
     * @type {number}
     * @memberof SearchWithDatePeriod
     */
    'endDate'?: number;
}
/**
 * 
 * @export
 * @interface SearchWithKeyword
 */
export interface SearchWithKeyword {
    /**
     * 关键词
     * @type {string}
     * @memberof SearchWithKeyword
     */
    'keyword'?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const SpecificLevel = {
    F1: 'F1',
    F2: 'F2',
    F2b: 'F2b',
    F3: 'F3',
    F3b: 'F3b',
    F4: 'F4',
    F5: 'F5',
    M: 'M',
    J: 'J',
    A1: 'A1',
    A2: 'A2',
    A2b: 'A2b',
    Ta: 'Ta',
    Tb: 'Tb',
    C: 'C',
    Tc: 'Tc'
} as const;

export type SpecificLevel = typeof SpecificLevel[keyof typeof SpecificLevel];



/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary 删除某人的机型经历
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aircraftExperiencesOverrideDelete: async (deleteWithID?: DeleteWithID, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aircraftExperiencesOverride`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteWithID, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询机型机型经历
         * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aircraftExperiencesOverrideGet: async (searchWithDateAndKeyword?: SearchWithDateAndKeyword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aircraftExperiencesOverride`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchWithDateAndKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加或修改某人的机型经历
         * @param {AircraftExperiencesOverrideRowUpsert} [aircraftExperiencesOverrideRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aircraftExperiencesOverridePost: async (aircraftExperiencesOverrideRowUpsert?: AircraftExperiencesOverrideRowUpsert, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/aircraftExperiencesOverride`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aircraftExperiencesOverrideRowUpsert, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除某次检查记录
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRideDetailDelete: async (deleteWithID?: DeleteWithID, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkRideDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteWithID, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询检查记录
         * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRideDetailGet: async (searchWithDateAndKeyword?: SearchWithDateAndKeyword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkRideDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchWithDateAndKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 增加或修改某次检查记录
         * @param {CheckRideDetailRowUpsert} [checkRideDetailRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRideDetailPost: async (checkRideDetailRowUpsert?: CheckRideDetailRowUpsert, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/checkRideDetail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkRideDetailRowUpsert, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 删除飞行员升级日期的覆盖行
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        levelOverrideDelete: async (deleteWithID?: DeleteWithID, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/levelOverride`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteWithID, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询所有飞行员升级日期的覆盖行
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        levelOverrideGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/levelOverride`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 飞行员升级日期的覆盖行上传
         * @param {LevelOverrideRowUpsert} [levelOverrideRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        levelOverridePost: async (levelOverrideRowUpsert?: LevelOverrideRowUpsert, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/levelOverride`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(levelOverrideRowUpsert, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 查询所有主表行
         * @param {SearchWithKeyword} [searchWithKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainSheetGet: async (searchWithKeyword?: SearchWithKeyword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/mainSheet`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchWithKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 根据Keyword获取某个人信息
         * @param {SearchWithKeyword} [searchWithKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pilotInfoGet: async (searchWithKeyword?: SearchWithKeyword, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pilotInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(searchWithKeyword, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 上传并处理Excel文件
         * @param {File} [file] 要上传的Excel文件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadExcelPost: async (file?: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/uploadExcel`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary 删除某人的机型经历
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aircraftExperiencesOverrideDelete(deleteWithID?: DeleteWithID, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aircraftExperiencesOverrideDelete(deleteWithID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.aircraftExperiencesOverrideDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 查询机型机型经历
         * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aircraftExperiencesOverrideGet(searchWithDateAndKeyword?: SearchWithDateAndKeyword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckRideDetailRow>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aircraftExperiencesOverrideGet(searchWithDateAndKeyword, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.aircraftExperiencesOverrideGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 增加或修改某人的机型经历
         * @param {AircraftExperiencesOverrideRowUpsert} [aircraftExperiencesOverrideRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async aircraftExperiencesOverridePost(aircraftExperiencesOverrideRowUpsert?: AircraftExperiencesOverrideRowUpsert, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.aircraftExperiencesOverridePost(aircraftExperiencesOverrideRowUpsert, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.aircraftExperiencesOverridePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 删除某次检查记录
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRideDetailDelete(deleteWithID?: DeleteWithID, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkRideDetailDelete(deleteWithID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.checkRideDetailDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 查询检查记录
         * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRideDetailGet(searchWithDateAndKeyword?: SearchWithDateAndKeyword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CheckRideDetailRow>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkRideDetailGet(searchWithDateAndKeyword, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.checkRideDetailGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 增加或修改某次检查记录
         * @param {CheckRideDetailRowUpsert} [checkRideDetailRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async checkRideDetailPost(checkRideDetailRowUpsert?: CheckRideDetailRowUpsert, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.checkRideDetailPost(checkRideDetailRowUpsert, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.checkRideDetailPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 删除飞行员升级日期的覆盖行
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async levelOverrideDelete(deleteWithID?: DeleteWithID, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.levelOverrideDelete(deleteWithID, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.levelOverrideDelete']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 查询所有飞行员升级日期的覆盖行
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async levelOverrideGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LevelOverrideRow>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.levelOverrideGet(options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.levelOverrideGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 飞行员升级日期的覆盖行上传
         * @param {LevelOverrideRowUpsert} [levelOverrideRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async levelOverridePost(levelOverrideRowUpsert?: LevelOverrideRowUpsert, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.levelOverridePost(levelOverrideRowUpsert, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.levelOverridePost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 查询所有主表行
         * @param {SearchWithKeyword} [searchWithKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mainSheetGet(searchWithKeyword?: SearchWithKeyword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MainSheetRow>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mainSheetGet(searchWithKeyword, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.mainSheetGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 根据Keyword获取某个人信息
         * @param {SearchWithKeyword} [searchWithKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pilotInfoGet(searchWithKeyword?: SearchWithKeyword, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PilotInfo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pilotInfoGet(searchWithKeyword, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.pilotInfoGet']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary 上传并处理Excel文件
         * @param {File} [file] 要上传的Excel文件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadExcelPost(file?: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.uploadExcelPost(file, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['DefaultApi.uploadExcelPost']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary 删除某人的机型经历
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aircraftExperiencesOverrideDelete(deleteWithID?: DeleteWithID, options?: any): AxiosPromise<void> {
            return localVarFp.aircraftExperiencesOverrideDelete(deleteWithID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询机型机型经历
         * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aircraftExperiencesOverrideGet(searchWithDateAndKeyword?: SearchWithDateAndKeyword, options?: any): AxiosPromise<Array<CheckRideDetailRow>> {
            return localVarFp.aircraftExperiencesOverrideGet(searchWithDateAndKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加或修改某人的机型经历
         * @param {AircraftExperiencesOverrideRowUpsert} [aircraftExperiencesOverrideRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        aircraftExperiencesOverridePost(aircraftExperiencesOverrideRowUpsert?: AircraftExperiencesOverrideRowUpsert, options?: any): AxiosPromise<void> {
            return localVarFp.aircraftExperiencesOverridePost(aircraftExperiencesOverrideRowUpsert, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除某次检查记录
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRideDetailDelete(deleteWithID?: DeleteWithID, options?: any): AxiosPromise<void> {
            return localVarFp.checkRideDetailDelete(deleteWithID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询检查记录
         * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRideDetailGet(searchWithDateAndKeyword?: SearchWithDateAndKeyword, options?: any): AxiosPromise<Array<CheckRideDetailRow>> {
            return localVarFp.checkRideDetailGet(searchWithDateAndKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 增加或修改某次检查记录
         * @param {CheckRideDetailRowUpsert} [checkRideDetailRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        checkRideDetailPost(checkRideDetailRowUpsert?: CheckRideDetailRowUpsert, options?: any): AxiosPromise<void> {
            return localVarFp.checkRideDetailPost(checkRideDetailRowUpsert, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 删除飞行员升级日期的覆盖行
         * @param {DeleteWithID} [deleteWithID] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        levelOverrideDelete(deleteWithID?: DeleteWithID, options?: any): AxiosPromise<void> {
            return localVarFp.levelOverrideDelete(deleteWithID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询所有飞行员升级日期的覆盖行
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        levelOverrideGet(options?: any): AxiosPromise<Array<LevelOverrideRow>> {
            return localVarFp.levelOverrideGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 飞行员升级日期的覆盖行上传
         * @param {LevelOverrideRowUpsert} [levelOverrideRowUpsert] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        levelOverridePost(levelOverrideRowUpsert?: LevelOverrideRowUpsert, options?: any): AxiosPromise<void> {
            return localVarFp.levelOverridePost(levelOverrideRowUpsert, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 查询所有主表行
         * @param {SearchWithKeyword} [searchWithKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mainSheetGet(searchWithKeyword?: SearchWithKeyword, options?: any): AxiosPromise<Array<MainSheetRow>> {
            return localVarFp.mainSheetGet(searchWithKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 根据Keyword获取某个人信息
         * @param {SearchWithKeyword} [searchWithKeyword] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pilotInfoGet(searchWithKeyword?: SearchWithKeyword, options?: any): AxiosPromise<Array<PilotInfo>> {
            return localVarFp.pilotInfoGet(searchWithKeyword, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 上传并处理Excel文件
         * @param {File} [file] 要上传的Excel文件
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadExcelPost(file?: File, options?: any): AxiosPromise<void> {
            return localVarFp.uploadExcelPost(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary 删除某人的机型经历
     * @param {DeleteWithID} [deleteWithID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aircraftExperiencesOverrideDelete(deleteWithID?: DeleteWithID, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aircraftExperiencesOverrideDelete(deleteWithID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询机型机型经历
     * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aircraftExperiencesOverrideGet(searchWithDateAndKeyword?: SearchWithDateAndKeyword, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aircraftExperiencesOverrideGet(searchWithDateAndKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加或修改某人的机型经历
     * @param {AircraftExperiencesOverrideRowUpsert} [aircraftExperiencesOverrideRowUpsert] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public aircraftExperiencesOverridePost(aircraftExperiencesOverrideRowUpsert?: AircraftExperiencesOverrideRowUpsert, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).aircraftExperiencesOverridePost(aircraftExperiencesOverrideRowUpsert, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除某次检查记录
     * @param {DeleteWithID} [deleteWithID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkRideDetailDelete(deleteWithID?: DeleteWithID, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkRideDetailDelete(deleteWithID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询检查记录
     * @param {SearchWithDateAndKeyword} [searchWithDateAndKeyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkRideDetailGet(searchWithDateAndKeyword?: SearchWithDateAndKeyword, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkRideDetailGet(searchWithDateAndKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 增加或修改某次检查记录
     * @param {CheckRideDetailRowUpsert} [checkRideDetailRowUpsert] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public checkRideDetailPost(checkRideDetailRowUpsert?: CheckRideDetailRowUpsert, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).checkRideDetailPost(checkRideDetailRowUpsert, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 删除飞行员升级日期的覆盖行
     * @param {DeleteWithID} [deleteWithID] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public levelOverrideDelete(deleteWithID?: DeleteWithID, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).levelOverrideDelete(deleteWithID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询所有飞行员升级日期的覆盖行
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public levelOverrideGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).levelOverrideGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 飞行员升级日期的覆盖行上传
     * @param {LevelOverrideRowUpsert} [levelOverrideRowUpsert] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public levelOverridePost(levelOverrideRowUpsert?: LevelOverrideRowUpsert, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).levelOverridePost(levelOverrideRowUpsert, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 查询所有主表行
     * @param {SearchWithKeyword} [searchWithKeyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mainSheetGet(searchWithKeyword?: SearchWithKeyword, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mainSheetGet(searchWithKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 根据Keyword获取某个人信息
     * @param {SearchWithKeyword} [searchWithKeyword] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public pilotInfoGet(searchWithKeyword?: SearchWithKeyword, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).pilotInfoGet(searchWithKeyword, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 上传并处理Excel文件
     * @param {File} [file] 要上传的Excel文件
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public uploadExcelPost(file?: File, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).uploadExcelPost(file, options).then((request) => request(this.axios, this.basePath));
    }
}



